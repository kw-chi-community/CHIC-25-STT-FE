name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main  # 메인 브랜치에 푸시될 때 실행

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # 1. GitHub에서 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Docker Hub에 로그인
    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    # 3. Docker 이미지 빌드 및 태그 (no-cache 옵션 추가)
    - name: Build and tag Docker image
      run: |
        docker build --no-cache -t ${{ secrets.DOCKER_HUB_USERNAME }}/chic_stt_frontend:latest .
        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/chic_stt_frontend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/chic_stt_frontend:latest

    # 4. Docker Hub로 푸시
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/chic_stt_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # 'build-and-push' 작업이 완료되면 실행

    steps:
    - name: Install SSH client
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client

    # 5. SSH 키 설정
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_SERVER_IP }} >> ~/.ssh/known_hosts

    # 6. SSH 접속 및 Docker 이미지 Pull & Run
    - name: Deploy to Server
      run: |
        ssh ${{ secrets.SSH_ID }}@${{ secrets.SSH_SERVER_IP }} << 'EOF'
          IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/chic_stt_frontend:latest"
          sudo docker pull $IMAGE
          sudo docker stop chic_STT_FE || true
          sudo docker rm chic_STT_FE || true
          sudo docker run -d --name chic_STT_FE -p 25113:80 $IMAGE
          sudo docker system prune -af
        EOF
